import { MCPTool } from "mcp-framework";
import { z } from "zod";
import axios from 'axios';

interface WhatsappSendImageInput {
  to: string;
  prompt: string;
  negative_prompt?: string;
  seed?: number;
  subseed?: number;
  subseed_strength?: number;
  steps?: number;
  width?: number;
  height?: number;
  pag_scale?: number;
}

class WhatsappSendImageTool extends MCPTool<WhatsappSendImageInput> {
  name = "whatsapp-send-image";
  description = "Gera automaticamente uma imagem a partir de um prompt textual usando IA generativa e envia para usuários ou grupos no WhatsApp. Permite customizar parâmetros como prompt negativo, seed, tamanho, passos, etc. Ideal para agentes LLM que precisam criar e entregar imagens sob demanda, sem etapas manuais. O envio é feito diretamente ao destinatário, com suporte a legendas e personalização avançada.";

  schema = {
    to: {
      type: z.string(),
      description: "ID do usuário ou grupo destinatário da imagem no WhatsApp.",
    },
    prompt: {
      type: z.string(),
      description: "Prompt descritivo associado à imagem, para contexto ou explicação ao destinatário.",
    },
    negative_prompt: {
      type: z.string().optional(),
      description: "Prompt negativo: elementos que NÃO devem aparecer na imagem.",
    },
    seed: { type: z.number().optional(), description: "Seed para controle de aleatoriedade." },
    subseed: { type: z.number().optional(), description: "Subseed para variação extra." },
    subseed_strength: { type: z.number().optional(), description: "Intensidade do subseed." },
    steps: { type: z.number().optional(), description: "Passos de geração." },
    width: { type: z.number().optional(), description: "Largura da imagem." },
    height: { type: z.number().optional(), description: "Altura da imagem." },
    pag_scale: { type: z.number().optional(), description: "Escala de guidance." },
  };

  async saveImage(base64Data: string, filename: string): Promise<string> {
    try {
      const fs = await import('fs/promises');
      const path = await import('path');
      const imagesDir = path.join(process.cwd(), 'public', 'images');

      await fs.mkdir(imagesDir, { recursive: true });

      const base64 = base64Data.replace(/^data:image\/(png|jpeg|jpg);base64,/, '');
      const filePath = path.join(imagesDir, filename);
      await fs.writeFile(filePath, Buffer.from(base64, 'base64'));
      return filePath;
    } catch (err: any) {
      return err.message;
    }
  }

  async openAI(input: any): Promise<{ success: boolean; image?: string; message?: string }> {
    const { default: OpenAI } = await import('openai');
    const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

    let prompt = input.prompt;
    if (input.negative_prompt) {
      prompt += `\nNegative prompt: ${input.negative_prompt}`;
    }

    const response = await openai.responses.create({
      model: process.env.GPT_IMAGE_GENERATION_MODEL || 'gpt-5-nano-2025-08-07',
      input: prompt,
      tools: [{ type: 'image_generation' }],
    });

    const imageData = response.output
      .filter((output: any) => output.type === 'image_generation_call')
      .map((output: any) => output.result);

    if (imageData.length > 0) {
      this.saveImage(imageData[0], `${Date.now()}.png`);
      return { success: true, image: imageData[0] };
    }
    return { success: false, message: 'No image generated by OpenAI' };
  }

  async local(input: any): Promise<{ success: boolean; image?: string; message?: string }> {
    const method = 'POST';
    const headers = new Headers();
    const body = JSON.stringify({
      prompt: input.prompt,
      negative_prompt:
        input.negative_prompt ||
        'low quality, blurry, deformed, bad anatomy, text, watermark',
      seed: input.seed || -1,
      subseed: input.subseed || -1,
      subseed_strength: input.subseed_strength || 0,
      batch_size: 1,
      steps: input.steps || 30,
      width: input.width || 512,
      height: input.height || 512,
      pag_scale: input.pag_scale || 7.5,
    });

    headers.set('Content-Type', 'application/json');

    const response = await fetch(`${process.env.LOCAL_IMAGE_GENERATION_URL}`, {
      method,
      headers,
      body,
    });

    if (!response.ok) {
      return { success: false, message: `Local API error: ${response.statusText}` };
    }

    const responseData = await response.json();
    if (responseData.images && responseData.images[0]) {
      this.saveImage(responseData.images[0], `${Date.now()}.png`);
      return { success: true, image: responseData.images[0] };
    }
    return { success: false, message: 'No image generated by local API' };
  }

  async generateImage(input: any): Promise<{ success: boolean; image?: string; message?: string }> {
    try {
      if (process.env.IMAGE_PROVIDER === 'openai') {
        return await this.openAI(input);
      } else if (process.env.IMAGE_PROVIDER === 'local') {
        return await this.local(input);
      } else {
        return { success: false, message: 'Invalid IMAGE_PROVIDER setting' };
      }
    } catch (err) {
      if (err instanceof Error) {
        return { success: false, message: err.message };
      }
      return { success: false, message: String(err) };
    }
  }

  async execute(input: WhatsappSendImageInput) {
    const { to, prompt, negative_prompt, seed, subseed, subseed_strength, steps, width, height, pag_scale } = input;
    try {
      const imageResult = await this.generateImage({
        prompt,
        negative_prompt: negative_prompt || '',
        seed: seed ?? -1,
        subseed: subseed ?? -1,
        subseed_strength: subseed_strength ?? 0,
        steps: steps ?? 30,
        width: width ?? 512,
        height: height ?? 512,
        pag_scale: pag_scale ?? 7.5,
      });

      if (!imageResult.success || !imageResult.image) {
        return { success: false, message: imageResult.message || 'Falha ao gerar imagem.' };
      }

      const imageBase64 = imageResult.image;
      const base64Prefix = imageBase64.startsWith('data:image') ? '' : 'data:image/png;base64,';
      const formattedBase64 = base64Prefix ? base64Prefix + imageBase64 : imageBase64;

      const payload = {
        args: {
          to: to,
          file: formattedBase64,
          filename: 'image.png',
          caption: prompt,
          quotedMsgId: null,
          waitForId: false,
          ptt: false,
          withoutPreview: false,
          hideTags: false,
          viewOnce: false,
          requestConfig: null,
        },
      };

      const response = await axios.post(`${process.env.WHATSAPP_URL}/sendImage`, payload, {
        headers: {
          'Content-Type': 'application/json',
          'api_key': process.env.WHATSAPP_SECRET || '',
        },
      });
      if (response.data?.success === false) {
        return { success: false, message: response.data?.error?.message || JSON.stringify(response.data?.error) };
      }
      return { success: true, message: 'Imagem gerada e enviada com sucesso.' };
    } catch (error: any) {
      console.error('Error sending image:', error.response ? error.response.data : error.message);
      return { success: false, message: `Failed to generate or send image: ${error.message}` };
    }
  }
}

export default WhatsappSendImageTool;
